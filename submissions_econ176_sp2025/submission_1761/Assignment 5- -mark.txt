# Square API-and-SDK Lab: &nbsp;&nbsp; _Payments and Processing_

This lab challenge introduces you to a widely-used payments-processing API and SDK, from ***Square***
+ We will use the sandbox (for imagined transactions) and, at times, no API calls at all.
+ You'll create a business and business location...
+ You'll create transactions at your business...
+ You'll analyze the tradeoffs/savings from two different payment approaches for your business...
+ With reflection on the process as a whole. <br> <font size="-1">(and EC for creative data-visu[REDACTED]zation across multiple runs)</font>

<br>

[ Due by Sun. March 2 ] &nbsp;&nbsp; Setting up your Square developer account -- and taking a screenshot of a successful API call (using your authentication token) -- submit to Gradescope by 3/2.


<br>

[ Due by Sun. March 9 ] &nbsp;&nbsp;  Your copy of this notebook, its business, and analysis/reflection -- submit to Gradescope by 3/9. <br> <font size="-1">(Be sure to submit the <tt>.ipynb</tt> notebook file.)</font>

<br>## Payment-project description and starter notebook

This is the notebook from our computing-themed Payments day... &nbsp;&nbsp; <font size="-2">(Feb. 25, 2025)</font>### <font color="DodgerBlue">Payments: &nbsp; _Project Description_</font>

This is at the bottom of this notebook, as well.

Examples from here to the end will walk you through getting started. Your task is to, **first**, get those payment-simulations to work, for your Square business (and your Square access token)...

**Then**, add a comparative analysis between two types - and costs - of payment-making, either from one of these four possible sets of alternatives, or from a contrast (pair of alternatives) of your own design.

<br>
<hr>
<br>


#### <font color="Coral"><b>HW Tasks</b></font>: &nbsp;&nbsp;  <font size="-1">details for this payments hw...</font>

1. Make sure the analysis cells (below) are working for you... _Then_,
1. Choose an analysis to undertake. It can be one of our four suggested ones or one of your own:
   + <font color="DodgerBlue"><b>the "CFF" program</b></font>: _How much would the Merchant gain if it created a CFF program where one person (the CFF) paid for all of their friends each time, resulting in fewer charges?_ (and how much could be passed along to the CFF customer?)
      + You'll have to include in the payment - perhaps in the _Notes_ field - ***how many*** people each CFF paid for, each time, and use that value to compute the savings...
   + <font color="DodgerBlue"><b>the "CoffeeCash" program</b></font>: _How much would the Merchant gain if it could consolidate all of the orders from a single customer over the course of, say, a week?_ This also would result in fewer charges. (Part of this could be passed along, in theory...)
      + Here, Square will compute how much it would have charged the Merchant... and you'll compute the lower amount _after_ consolidation.
   + <font color="DodgerBlue"><b>the pitch for the _Merchant_ to join "Cube"</b></font>: &nbsp; Cube is an _imagined_ variant of Square that uses FedNow instead of Credit Cards. How much would the Merchant save with Cube?
      + Here, just use the nominal amounts of FedNow vs Square's charges. [Here is the FedNow Fee Schedule](https://www.frbservices.org/resources/fees/fednow-2025). (The top line is the one to use. The $25/month is waived this year.)
   + <font color="DodgerBlue"><b>the pitch for Square to _become_ "Cube"</b></font>: &nbsp; As a consultant, you are considering pitching that Square itself roll out a new premium brand, named _Cube_ &nbsp; (perhaps as a new "dimension" in payment-processing.) It uses FedNow instead of Credit Cards. How much would **Square** benefit in this case?
      + Just use the nominal amounts for FedNow vs CCards, for this hw...
      + This is <u>not</u> the same as the previous one! This one compares FedNow vs CCards, instead of FedNow vs Square! (As a result, this one's a bit more "real" ... if only a bit!)
   + <font color="DodgerBlue"><b>Other payment ideas?</b></font> &nbsp; ***Great!*** &nbsp; Feel free to use your own idea here, as long as it compares two real, or real-ish, payment approaches. Os, save them as part of your business-creation project at course's end.
1. Change the simulation to match your business's details ðŸ˜€  You can stick with coffee - or choose another realm.
1. Change the simulation so that you're comparing two different approaches to handling payments.
1. Be sure to run small-as-possible tests to make sure things work well
   + Debug as needed -- Remember, debug locally and only use the real requests when it seems entirely debugged...
1. [REDACTED]ve-test your shop's "bustle," perhaps looping over five payments.
1. Then, grab those last five payments from Square's API.
1. **Analyze** these five, prototyping and debugging your analysis
1. Through that analysis, compare the costs of the two payment approaches you're using.
1. Then, try the whole workflow for a larger set of new payments, perhaps a few dozen? 42? 100?
   + No need for more than this, unless you'd like to...
1. Finally, create a short write up with
   + your choice of payment-approaches to analyze (and your choice of business, if you changed it from coffee ðŸ˜€)
   + note any API customizations you needed to investigate the business-intervention
     + For example, the CFF requires an additional piece of information: how many people the purchaser was covering
     + There is plenty of freedom here, and not every approach needs extra info
   + include the results of your analysis
   + are there other variations (of the comparison you made) worth noting -- what are the tradeoffs? It doesn't need to be a market-winning idea or even a reasonable idea, just an idea...
     + This might seem unneeded, but it's often helpful, even if silly, obvious, or outlandish. <br> <font size="-1">(We all -- rightly -- like making decisions within a "trade-off space.")</font>

<font color="DodgerBlue"><b>EC #1</b></font> &nbsp; (up to +10%) <font size="-1"> for computing each strategy's different resulting profits (or costs) over time -- and then plotting these values on the same axes. For example, the horizontal (x) axis could be the number of customers seen. The vertical (y) axis would be the value (whether profit or costs). </font>

<font color="Coral"><b>EC #2</b></font> &nbsp; (up to _another_ +10%) <font size="-1">for running the entire above simulation "lots" of times (up to you: more than 500) and then, across all those runs, plotting the _averages_, the _90th percentile_, and the _10th percentile_ at each step. Extra fun if the percentiles are shown as a "translucent error band." AI - and Seaborn's <tt>lineplot</tt> - might help. See its [examples](https://seaborn.pydata.org/examples/index.html) below the documentation.  </font>### Reminder: _Web requests_#### Other HTTP approaches worth knowing:
+ <tt>curl</tt>: &nbsp; client url, a command-line utility for web calls
+ in-browser resources, always
+ a provided <tt>SDK</tt> or _Software Development Kit_
  + we'll use one below### Reminder: _API calls_

universally considered the "more ethical" side of automatic HTTP#### Let's use requests to make an API call to obtain the ISS's position in JSON
+ Acronyms!
+ API == Application Programming Interface
+ ISS == International Space Station (not really Fintech-relevant, but...)
+ JSON == Javascript Object Notation, which are Python dictionaries

Also:
+ SDK == Software Development Kit (a _whole set_ of APIs)### Getting started with the Square API

This is the API, not yet the SDK...
+ Application programming interface ("the web calls")  vs.
+ Software Development Kit ("the library")#### Let's run the &nbsp; _Locations_ &nbsp; API via <tt>curl</tt>#### It won't work!

You <font color="Coral"><b>need an account</b></font>, which will provide that "Bearer Token"
+ You should create an account from this [Square Developer Account page](https://developer.squareup.com/docs/get-started/create-account-and-application)
+ Helpfully, it shares all of the information it needs. As the "software development business," feel free to use your Fintech project's name or "Econ176" or a variation of your own choosing...
+ Then, you can click on ["Make your first API call"](https://developer.squareup.com/docs/get-started/make-api-request)
+ Perhaps keep a copy of your access token somewhere non-public. (You can always get it again from Square.)
+ As long as you don't share your team's copy of this notebook out, it's ok simply to keep it in here.
+ And, you're on your way... !## Onward, to the Square libraries

These are usually called "the SDK" or the _Software Development Kit_

For Square, the Python library (SDK) is called `squareup`

Colab includes <tt>requests</tt> by default, but it doesn't include the <tt>squareup</tt> library by default, so we install it here:<b>Yay!</b> we've made our first successful SDK-based programs.

Programs which, in turn, made successful API calls...

It's best (when hand-testing) to separate the network calls (API calls) from the analysis of their results, since there will definitely be lots of debugging as you develop that analysis ...

... and also develop an _internal_ conceptual model of the data!It's <tt>json</tt>, so we can use the <tt>json</tt> library...#### Let's _create_ a location...#### Next, let's try the <u><i>Payments</i></u> API!#### Creating a payment from the SDK

[REDACTED]ke locations, new payments are POSTed...

... meaning that a "body" of data is sent along with the request to create that entry in Square's remote database (which is really all that's happening, from a developer point of view...)

<br>

<b>However</b>, it's important to avoid accidentally POSTing a payment twice (duplicate charge)

<br>

So one <tt>idemopotency_key</tt> is constructed and attached to each payment. Running twice only POSTs once:#### Errors happen...

+ you'll need to read them,
+ digest them,
+ ask us!,
+ go to the API documentation and other docs,
+ ask GPT, or Perplexity, or older cousin Google ...# Payment Processes: &nbsp; _Execution and Analysis_#### Making 5 payments...

Let's create some business "bustle" in which a loop makes random payments
+ For "CoffeeTime" I'll imagine it's busy -- plus, to keep things moving, we'll use intervals of seconds to represent minutes
+ Since there's always a line, let's imagine an order between 500 cents and 900 cents, every 2 to 5 minutes (here, 2 to 5 seconds)
+ we'll print a short summary of the details and return the result of the request
+ for fun, we'll choose a random buyer email address and a random item ordered
+ we will be able to use these for example analyses later...#### Let's add "bustle" by looping:#### Tasks to try out...
1. Try the above cells as they are, using the <tt>real_request=False</tt> input, so that no network API calls are made
1. Be sure that you feel good about how these cells are working...
1. Change <tt>real_request=False</tt> to <tt>real_request=True</tt> in the _single-run testing_ cell and try it out!
1. Check that it worked - and check your Square transaction logs, to be sure it worked.
1. Change back to <tt>real_request=False</tt> in the _single-run testing_ cell, just in case it accidentally gets run in the future...
1. Change the looping cell the same way and live-test the "bustling business" example! Adapt and debug, as necessary
  + If you need to debug, set <tt>real_request=False</tt> until its working.
  + Take this approach in general: debug locally, ... only when everything is working locally, live-test on the network
1. Yay! You have your "payment-bustle" simulation!
1. Change back to <tt>real_request=False</tt> in the looping cell, just in case it gets run in the future...   <br> &nbsp;&nbsp; <font size="-1">For example, by choosing the "Run all" option in the Colab notebook.</font>
1. Next, we'll analyze our payments...Phew!  &nbsp;&nbsp; We're going to need to access this data programmatically in order to analyze - and answer questions - about it!

Here, let's see if we can access the amount and email fields of each:#### How do we obtain the processing fees?

First, [here are Square's rates](https://squareup.com/help/us/en/article/5068-what-are-square-s-fees) &nbsp;&nbsp;  Notice how many different payment types there are!

<br>

Now, let's see the data... checking the fields, there is a `'processing fee'` field:#### Reflection on fees

It seems that we _can_ add these up ... and they do add up!  

For sure, we could also vary our analysis in any way we might imagine... .

<br>

That imagining - and analysis - is the challenge for all of these different "business-experiments" below.

You'll choose one to implement:

<br>
<hr>
<br>


#### <font color="Coral"><b>HW Tasks</b></font>: &nbsp;&nbsp;  <font size="-1">details for this payments hw...</font>

1. Make sure the analysis cells (below) are working for you... _Then_,
1. Choose an analysis to undertake. It can be one of our four suggested ones or one of your own:
   + <font color="DodgerBlue"><b>the "CFF" program</b></font>: _How much would the Merchant gain if it created a CFF program where one person (the CFF) paid for all of their friends each time, resulting in fewer charges?_ (and how much could be passed along to the CFF customer?)
      + You'll have to include in the payment - perhaps in the _Notes_ field - ***how many*** people each CFF paid for, each time, and use that value to compute the savings...
   + <font color="DodgerBlue"><b>the "CoffeeCash" program</b></font>: _How much would the Merchant gain if it could consolidate all of the orders from a single customer over the course of, say, a week?_ This also would result in fewer charges. (Part of this could be passed along, in theory...)
      + Here, Square will compute how much it would have charged the Merchant... and you'll compute the lower amount _after_ consolidation.
   + <font color="DodgerBlue"><b>the pitch for the _Merchant_ to join "Cube"</b></font>: &nbsp; Cube is an _imagined_ variant of Square that uses FedNow instead of Credit Cards. How much would the Merchant save with Cube?
      + Here, just use the nominal amounts of FedNow vs Square's charges. [Here is the FedNow Fee Schedule](https://www.frbservices.org/resources/fees/fednow-2025). (The top line is the one to use. The $25/month is waived this year.)
   + <font color="DodgerBlue"><b>the pitch for Square to _become_ "Cube"</b></font>: &nbsp; As a consultant, you are considering pitching that Square itself roll out a new premium brand, named _Cube_ &nbsp; (perhaps as a new "dimension" in payment-processing.) It uses FedNow instead of Credit Cards. How much would **Square** benefit in this case?
      + Just use the nominal amounts for FedNow vs CCards, for this hw...
      + This is <u>not</u> the same as the previous one! This one compares FedNow vs CCards, instead of FedNow vs Square! (As a result, this one's a bit more "real" ... if only a bit!)
   + <font color="DodgerBlue"><b>Other payment ideas?</b></font> &nbsp; ***Great!*** &nbsp; Feel free to use your own idea here, as long as it compares two real, or real-ish, payment approaches. Os, save them as part of your business-creation project at course's end.
1. Change the simulation to match your business's details ðŸ˜€  You can stick with coffee - or choose another realm.
1. Change the simulation so that you're comparing two different approaches to handling payments.
1. Be sure to run small-as-possible tests to make sure things work well
   + Debug as needed -- Remember, debug locally and only use the real requests when it seems entirely debugged...
1. [REDACTED]ve-test your shop's "bustle," perhaps looping over five payments.
1. Then, grab those last five payments from Square's API.
1. **Analyze** these five, prototyping and debugging your analysis
1. Through that analysis, compare the costs of the two payment approaches you're using.
1. Then, try the whole workflow for a larger set of new payments, perhaps a few dozen? 42? 100?
   + No need for more than this, unless you'd like to...
1. Finally, create a short write up with
   + your choice of payment-approaches to analyze (and your choice of business, if you changed it from coffee ðŸ˜€)
   + note any API customizations you needed to investigate the business-intervention
     + For example, the CFF requires an additional piece of information: how many people the purchaser was covering
     + There is plenty of freedom here, and not every approach needs extra info
   + include the results of your analysis
   + are there other variations (of the comparison you made) worth noting -- what are the tradeoffs? It doesn't need to be a market-winning idea or even a reasonable idea, just an idea...
     + This might seem unneeded, but it's often helpful, even if silly, obvious, or outlandish. <br> <font size="-1">(We all -- rightly -- like making decisions within a "trade-off space.")</font>

<font color="DodgerBlue"><b>EC #1</b></font> &nbsp; (up to +10%) <font size="-1"> for computing each strategy's different resulting profits (or costs) over time -- and then plotting these values on the same axes. For example, the horizontal (x) axis could be the number of customers seen. The vertical (y) axis would be the value (whether profit or costs). </font>

<font color="Coral"><b>EC #2</b></font> &nbsp; (up to _another_ +10%) <font size="-1">for running the entire above simulation "lots" of times (up to you: more than 500) and then, across all those runs, plotting the _averages_, the _90th percentile_, and the _10th percentile_ at each step. Extra fun if the percentiles are shown as a "translucent error band." AI - and Seaborn's <tt>lineplot</tt> - might help. See its [examples](https://seaborn.pydata.org/examples/index.html) below the documentation.  </font>## Congrats!

You're ready to start <i><u>Pay Up!</u></i> , your new fintech consultancy which speci[REDACTED]zes in creative payment processing and alternatives...

<br>

Payments are an important facet of fintech, but they're only one. Feel free to expand on this for a final project -- or take another path.
# &nbsp;