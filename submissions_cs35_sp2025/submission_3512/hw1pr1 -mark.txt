## hw1pr1: <i>Files!</i>
+ walking through folders and files  (500 files - or many more!)
+ analyzing, counting, inquiring, and <i>insight-producing</i> as we go!  By the way, when I run the above cell on my desktop machine (Mac), the response is

``'/Users/zacharydodds/Desktop/cs35/week1/starting_notebooks'``

on a Windows laptop, the path uses a different separator. Mine is

``'c:\\Users\\dodds\\OneDrive\\Desktop\\cs35\\week1\\starting_notebooks'``

Your results will almost certainly differ.

In fact, if they *don't* differ ... I'm _very_ interested! ü§î ü¶îIn 2024, my Mac setup succeeds with a ``UserWarning`` that tells me to install the ``pickleshare`` library.

I refuse based on snack-sharing principles!

One can only share freely, not under admonishment/warning!

(If this happens to you - let me know and we'll fix it...)On first glance, it seems we can't open the file ``nottrue.ipynb`` ...

It's in the folder ``intro_first`` -- see if you can open it ...We *could* use the command-line ``cat`` or ``type`` one file at a time ...

But, what if we have to walk _500 files_ ?!  <font size="-2">(Alas, this joke stays around for at least this whole week!)</font>

  + Then, we need a function - and script - to access its contents. 
  + We started this last week, let's revisit it again here:Notice that, in Python, the Mac/forwardslash/style paths work, _even on Windows_#### But, we have 500 files...

Let's write <font color="DodgerBlue">_steppingstone_ functions</font> to make sense of our 500 files...

Let's start by reminding ourselves we can write a function that returns.

We'll call this Version 0:<hr>#### Introducing ``os.walk``

The function ``os.walk(path)`` will walk _any number_ of files...

Before we write a function, let's try  ``os.walk`` immediately:Here's a line-wrapped version of the list ``L``
  + Below it, is a picture of the folder-and-file structure!  
  + Our goal: mind-mapping the two representations!!``L = [('./intro_first', ['cs', 'sci'], ['.DS_Store', 'nottrue.ipynb']), 
('./intro_first/cs', [], ['.DS_Store', 'file35.txt', 'file181y.txt']), 
('./intro_first/sci', ['50', '10'], ['.DS_Store']), ('./intro_first/sci/50', [], ['IDE.txt']), ('./intro_first/sci/10', [], ['IDE.txt'])]``See if you can match the _syntactic_ structure (the text!) with the _visual_ structure (the image!) 

<hr>

Onward!#### Now, let's incorporate ``os.walk`` into a series of functions...Ok!  But we didn't actually "walk" the folders -- or files! 

That is, we only counted, and didn't <u>consider</u>, each one...

Let's print all of the folder names!
If you're on Windows, you likely see some "hidden MACOSX" directories, ``__MACOSX``

<font color="DodgerBlue"><b>Task!</b></font> 

Change the above code so that it _skips_ any path that contains the string ``__MACOSX``

We'll do this together...<hr>But, we want to see the files!

Let's print all their full filenames (the full paths)!**Aside**: &nbsp;&nbsp; It's possible to assemble paths using the operating system's "correct" character:Notice that it _joined_ the path and the file.

<br>

Since Python is happy with ``/`` we'll use that for now.

<hr>#### But, we want to get all of the files' _contents_  !

<u>Notice</u> there are lots of files named ``".DS_Store"`` ...

They are binary data used by MacOS - they will cause trouble!

Let's see the trouble, and then fix it:#### The encoding was wrong!  

(Those ``.DS_store`` files are binary, not human-readable.)

We could change to, say, latin-1 and see the bytes. But, let's not...

We really just want to _algorithmically_ skip over those files. Let's try it:

<font color="DodgerBlue"><b>Task to try</b></font>

Add an if statement in the above "steppingstone function" in order to simply skip over any file that begins with a dot (a period character: ``"."``)

Then, run it again. (It's ok to leave those dot files' pathnames - or not...)<hr>####  Two examples leading into our 10,000-file challenges! 

<u>Example 1</u> &nbsp; Let's count how many ``.txt`` files we have... <font color="DodgerBlue"><b>This is an example</b></font> of a short (1-3 sentence) markdown cell, giving interpretation and context for the above result...

#### Number of ``.txt`` files
  + It seems that this folder, ``intro_first`` has four (4) ``.txt`` files.  This seems reasonable!
  + We could go further and see what _percentage_ of files are ``.txt`` ... 
  + It's also worth noting that we're trusting the file extension ``.txt`` here: some text files could be masquerading as other things... üòä?!The key idea is to ...
  + share the results found, contextualized for us sapiens ...
  + consider what else could be done, even if we're not doing so ...
  + note possible incompletenesses, countervailing forces, concerns in general ...
  + use emojis ü¶î !<hr>####  Second example: using file *contents* 

<u>Example 2</u> &nbsp; Let's count how many of the ``.txt`` files contain the substring ``'CS'`` -- not in the filename, but in the file ***contents***<font color="Coral"><b>Results:</b></font> 

#### Number of ``CS``-content ``.txt`` files
  + It seems that this folder, ``intro_first`` has two ``'CS'``-containing ``.txt`` files, out of four total ``.txt`` files, that is, ``50%`` <br><br>
  + <u>Reflection</u>: _This seems computationally balanced._ <br><br>
  + <u>Opportunities</u>: We could go further and try this in larger folders - such as this whole machine! Or, we could look for other things (like phone numbers or names in various formats). Or, really, we could ask-and-answer almost any algorithmic question about any subset of files on any machine at all... <br><br>
  +   _The fox knows many things, but the hedgehog knows one big thing._ - [Archilochus](https://www.goodreads.com/author/quotes/7614908.Archilochus#:~:text=Archilochus%20Quotes&text=We%20don't%20rise%20to,the%20level%20of%20our%20training.&text=The%20fox%20knows%20many%20things,hedgehog%20knows%20one%20big%20thing.&text=Heart%2C%20my%20heart%2C%20so%20battered,the%20men%20who%20hate%20us.) ü¶î #### Trying other directories/folders

The ``path`` can be _any_ folder on your local machine, allowing for _arbitrary_ local exploration and discovery...

For example, this next cell will count <font color="Coral"><b>how many folders</b></font> do I have, starting at some ``path``
+ to count <font color="Coral"><b>files</b></font>, you'll need to build from the examples above#### <font color="DodgerBlue"><b>Your task</b></font>: The Rolodex challenge!
+ Here is [the homework page that describes hw1's challenges...](https://docs.google.com/document/d/1SXgPlR00aIxahDi3OYR8y9-AODNwBuLbQsLLt9AKSa4/edit)
+ A few questions are "our" design
+ Then, ask-and-answer more are of _your_ design
+ And, you'll answer _your_ questions from at least two other "root" directories (the ``path`` that gets everything started is sometimes called the "root": the folder whose files your functions _walk_! :)
+ Create a short <font color="Coral"><b>Results:</b></font> section after each of "our" and _your_ questions. Feel free to use the template above.
+ Good luck, walking <i>far more</i> than one thousand files!

<br>
# File counting & phone numbers#### <font color="Coral"><b>Results:</b></font> 

##### **Number of ``.txt`` files**
  + ``intro_first`` has four ``.txt`` files, ``intro_second`` has 68 ``.txt`` files, and ``files_challenge`` has 6361 ``.txt`` files,<br><br>
  + <u>Opportunities</u>: This code could be easily modified to search for other kinds of files, such as images üì∏ <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **Maximum directory depth**
  + ``intro_first`` has a maximum depth of four, and the associated path is ``./intro_first/sci/10/IDE.txt`` 
  <br><br>
  + ``intro_second``has a maximum depth of six, and the associated path is ``./intro_second/test/sub/subSub/deepSub/seaFloor.txt`` 
  <br><br>
  + ``files_challenge`` has a maximum depth of 12, and the associated path is ``./files_challenge/phonebook 2020/more/test/sub1/superSub1/superDuperSub2/deeply_hidden_folder/a/c/fortytwo/101010.txt`` <br><br>
  + <u>Opportunities</u>: You could search for the deepest path for a type of folder üõ§Ô∏è <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **Phone number digit count**
  + ``intro_first`` has 0 ten-digit phone numbers
  <br><br>
  + ``intro_second`` has 23 ten-digit phone numbers
  <br><br>
  + ``files_challenge`` has 5283 ten-digit phone numbers<br><br>
  + <u>Opportunities</u>: You could arrange phone numbers by length, or use a file that associates phone number length with where the number comes from to guess where the number originates üó∫Ô∏è  <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **909 seeker**
  + ``files_challenge`` has 597 ten-digit phone numbers with the area code 909 <br><br>
  + <u>Opportunities</u>: You could associate area codes with location through a new file, search for other area codes (user input), or modify it to apply to international number codes (+1, etc) üìû <br><br># Names: first and last#### <font color="Coral"><b>Results:</b></font> 

##### **How many names contain 3 i's?**
  + ``intro_first`` has no names containing 3 i's <br><br>
  + ``intro_second`` has 4 names containing 3 i's <br><br>
  + ``files_challenge`` has 289 names containing 3 i's <br><br>
  + <u>Opportunities</u>: You could try this with other letters, other numbers of letters, consecutive letters <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **Which names contain the most i's?**
  + ``intro_first`` has CS for insight containing 2 i's <br><br>
  + ``intro_second`` has Eric Williams containing 3 i's <br><br>
  + ``files_challenge`` has Cindi Wisnieski containing 5 i's <br><br>
  + <u>Opportunities</u>: You could try this with other letters, or in my case, have it read last-first names first-last <br><br>
  + I really struggled with the file limiting part of the code because I couldn't figure out how to make the string spit out by the file read function separated into lines. I didn't think of making it it's own function! ü§Ø#### <font color="Coral"><b>Results:</b></font> 

##### **How many names contain Khaby?**
  + ``intro_first`` and``intro_second`` have none<br><br>
  + ``files_challenge`` has 27 <br><br>
  + <u>Opportunities</u>: You could try this with other strings, like searching for words instead of names <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **Last name input detector**
##### Khaby
  + ``intro_first`` and``intro_second`` have no "Khaby"s<br><br>
  + ``files_challenge`` has 4 "Khaby"s
##### D'Amelio
  + ``intro_first`` and``intro_second`` have no "D'Amelio"s<br><br>
  + ``files_challenge`` has 35 "D'Amelio"s
##### CS35_Participant_1
  + ``intro_first`` and``intro_second`` have no "CS35_Participant_1"s<br><br>
  + ``files_challenge`` has 2 "CS35_Participant_1"s
##### Kathuria
  + ``intro_first`` and``intro_second`` have no "Kathuria"s<br><br>
  + ``files_challenge`` has 16 "Kahturia"s <br><br>
  <br><br>
<u>Opportunities</u>: You could have this list every name with that last name, translating every name to a format of your choice <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **First name input detector**
##### Khaby
  + ``intro_first`` and``intro_second`` have no "Khaby"s<br><br>
  + ``files_challenge`` has 23 "Khaby"s

##### D'Amelio
  + ``intro_first`` and``intro_second`` have no "D'Amelio"s<br><br>
  + ``files_challenge`` has 18 "D'Amelio"s
##### CS35_Participant_1
  + ``intro_first`` and``intro_second`` have no "CS35_Participant_1"s<br><br>
  + ``files_challenge`` have no "CS35_Participant_1"s
##### Biruk
  + ``intro_first`` and``intro_second`` have no "Biruk"s<br><br>
  + ``files_challenge`` has 21 "Biruk"s <br><br># Make up your own (part A)#### <font color="Coral"><b>Results:</b></font> 

##### **More NE or SW?**
  + ``intro_first`` has 0 from either <br><br>
  + ``intro_second`` has 2 10-digit numbers from the NE and 1 from the SW<br><br>
  + ``files_challenge`` has 979 10-digit numbers from the NE and 678 from the SW<br><br>
  + <u>Opportunities</u>: You could try this with other locations, or more specific area codes üõ©Ô∏è <br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **Longest last name**
  + ``intro_first``'s longest last name is "notebooks" with 9 characters<br><br>
  + ``intro_second``'s longest last name is Ramirez with 7 characters<br><br>
  + ``files_challenge``'s longest last name is NadeemChaudhary with 15 characters<br><br>#### <font color="Coral"><b>Results:</b></font> 

##### **Most vowels in proportion to name length**
  + ``intro_first``'s name with most vowels in proportion to length is "Colab"<br><br>
  + ``intro_second``'s name with most vowels in proportion to length is Tina<br><br>
  + ``files_challenge``'s name with most vowels in proportion to length is Maia <br><br># Part B exploration#### <font color="Coral"><b>Results:</b></font> 

##### **General questions about my downloads folder**
  + ``Downloads`` has 9424 files<br><br>
  + 153 are pdfs<br><br>
  + ``Downloads``'s maximum directory depth is 14, with the associated path `./Downloads/starting_notebooks/files_challenge/phonebook 2020/more/test/sub1/superSub1/superDuperSub2/deeply_hidden_folder/a/c/fortytwo/101010.txt`<br><br>
  + <u>Opportunities</u>: I could explore other files but downloads seemed the most interesting as it's where I dump document I make + download + get sent which is... pretty much everything on my computer üôä<br><br>