#
# computing-styling trick of the day     (or, of the minute...)
#
# the setting for word-wrapping on the output is
#     "notebook.output.wordwrap": true,   (in your settings.json file or from code ... settings ...) 

print( list(range(100)) )



#
# see if we have the requests library...
#

import requests


#
# if you _don't_ have the requests library, let's install it!
#

# for me, it worked to uncomment and run this command, here in this cell:
# #3 install requests  or   # install requests

# an alternative is to run, in a terminal, the command would be 
#  #3 install requests  or    # install requests      (the ! is needed only if inside python)

# it's very system-dependent how much you have to "restart" in order to use
# the new library (the notebook, vscode, the jupyter extension, etc.)

# troubles?  let us know!  we'll work on it with you...


#
# hopefully, this now works! (if so, running will succeed silently)
#

import requests


#
# let's try it on a simple webpage
#

#
# we assign the url and obtain the api-call result into result
#    note that result will be an object that contains many fields (not a simple string)
# 

url = "https://www.cs.hmc.edu/~dodds/demo.html"
result = requests.get(url)
result    

# if it succeeded, you should see <response [200]>
# see the list of http reponse codes for the full set!


#
# when exploring, you'll often obtain an unfamiliar object. 
# here, we'll ask what type it is 
type(result)


# here is one of the data members within the result
# it "remembers" (keeps track of) the url requested:
result.headers


# we can print all of the data members in an object with dir
# since dir returns a list, we will grab that list and loop over it:
all_fields = dir(result)

for field in all_fields:
    if "_" not in field: 
        print(field)


#
# let's try printing a few of those fields (data members): 
print(f"result.url         is {result.url}")  # the original url
print(f"result.raw         is {result.raw}")  # another object!
print(f"result.encoding    is {result.encoding}")  # utf-8 is very common
print(f"result.status_code is {result.status_code}")  # 200 is success!


# in this case, the result is a text file (html) let's see it!
contents = result.text
print(contents)


# yay!  
# this shows that you are able to "scrape" an arbitrary html page... 

# now, we're off to more _structured_ data-gathering...


#
# we assign the url and obtain the api-call result into result
#    note that result will be an object that contains many fields (not a simple string)
# 

import requests

url = "http://api.open-notify.org/iss-now.json"   # this is sometimes called an "endpoint" ...
result = requests.get(url)
result    

# if it succeeds, you should see <response [200]>


#
# let's try printing those shorter fields from before:
print(f"result.url         is {result.url}")  # the original url
print(f"result.raw         is {result.raw}")  # another object!
print(f"result.encoding    is {result.encoding}")  # utf-8 is very common
print(f"result.status_code is {result.status_code}")  # 200 is success!


#
# in this case, we know the result is a json file, and we can obtain it that way:
json_contents = result.json()
print(json_contents)

# remember:  json_contents will be a _dictionary_


#
# let's re-remind ourselves how dictionaries work:
def getlong(contents):
    cs35_participant_2 = float(contents['iss_position']['longitude'])       # challenge:  could we access the other components? what _types_ are they?!!
    return cs35_participant_2

def getlat(contents):
    lat = float(contents['iss_position']['latitude'])       # challenge:  could we access the other components? what _types_ are they?!!
    return lat

print(f"the iss longitude is {getlong(json_contents)}.")
print(f"the iss latitude is {getlat(json_contents)}.")


#
# in python, we can use the resulting dictionary... let's see its keys:
print(list(json_contents.keys()))  

# also, watch out for string vs. numeric types, e.g., for latitude and longitude.
# at heart, _all_ web data are strings... .

# these experiments will be helpful for problem 1, below :)


from math import *    # this import is for the sin, cos, radians, ...

def haversine(lat1, long1, lat2, long2):
    """
    calculate the great circle distance in kilometers between two points
    on the earth (specified in decimal degrees)
    """
    
    # convert decimal degrees to radians
    long1, lat1, long2, lat2 = map(radians, [long1, lat1, long2, lat2])


    # haversine formula
    dlong = long2 - long1
    dlat = lat2 - lat1
    trig = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlong/2)**2
    # radius of earth. use 3956 for miles. 6371 for km.
    radius = 3956  # we'll use miles!
    return radius * 2 * asin(sqrt(trig))


claremontlong = -117.7198
claremontlat = 34.0967

isslong = getlong(json_contents)
isslat = getlat(json_contents)

print(f"the haversine distance between claremont and the iss is {(haversine(claremontlat, claremontlong, isslat, isslong))/1.609} miles.")


# json is a javascript dictionary format -- almost the same as a python dictionary:
data = { 'key':'value',  'fave':42,  'list':[5,6,7,{'mascot':'aliiien'}] }
print(data)

# we can write in json format to a local file, named small42.json:
import json 

with open("small.json", "w") as f:
    json.dump( data, f )


# we can also read from a json file
# the resulting data will be a _dictionary_:

with open("small.json", "r") as f:
    dictionary = json.load( f )

print(f"the {dictionary = }")


# let's access this dictionary -- first, the keys:
list(dictionary.keys())   # how do we get 'aliiien' from newdata?


# task: use the dictionary to obtain (a) 'value' , (b) 42 , (c) 'aliiien'  [tricky!]

# remember that there are two ways to get the value from a key:
# way 1:  dictionary['key']            # errors if 'key' isn't present
# way 2:  dictionary.get('key')        # returns none if 'key' isn't present

dictionary['key']


import requests 

# here, we will obtain plain-text results from a request
url = "https://www.cs.hmc.edu/~dodds/demo.html"  # try it + source
# url = "https://www.scrippscollege.edu/"          # another possible site...
# url = "https://www.pitzer.edu/"                  # another possible site...
# url = "https://www.cmc.edu/"                     # and another!
# url = "https://www.cgu.edu/"
result = requests.get(url)        
print(f"result is {result}")        # hopefully it's 200


# if the request was successful, the response will be [200]. 
# then, we can grab the text - or json - from the site:

text = result.text                  # provides the html page as a large string...
print(f"len(text) is {len(text)}")  # let's see how large the html page is... 

print("\nthe first 242 characters are\n")
print(text[:242])                  # we'll print the first few characters...  

# change this to text[:] to see the whole document...
# notice that we can run many different analyses without having to re-call/re-scrape the page (this is good!)


#
# we assign the url and use requests.get to obtain the result into result_astro
#
#    remember, result_astro will be an object that contains many fields (not a simple string)
# 

import requests

url = "http://api.open-notify.org/astros.json"   # this is sometimes called an "endpoint" ...
result_astro = requests.get(url)
result_astro

# if it succeeded, you should see <response [200]>


# if the request succeeded, we know the result is a json file, and we can obtain it that way.
# let's call our dictionary something more specific:

astronauts = result_astro.json()
print(astronauts)
d = astronauts     # d is shorter to type

# remember:  d and astronauts will be a _dictionary_

note = """ here's yesterday's result - it _should_ be the same today!

{"people": [{"craft": "iss", "name": "oleg kononenko"}, {"craft": "iss", "name": "nikolai chub"},
{"craft": "iss", "name": "tracy caldwell dyson"}, {"craft": "iss", "name": "matthew dominick"},
{"craft": "iss", "name": "michael barratt"}, {"craft": "iss", "name": "jeanette epps"},
{"craft": "iss", "name": "alexander grebenkin"}, {"craft": "iss", "name": "butch wilmore"},
{"craft": "iss", "name": "sunita williams"}, {"craft": "tiangong", "name": "li guangsu"},
{"craft": "tiangong", "name": "li cong"}, {"craft": "tiangong", "name": "ye guangfu"}], "number": 12, "message": "success"}
"""
""


#
# cell to try out parsing d  (astronauts)
#




d['people'][4]['name'][3:0:-2]


d['people'][0]['name'][7:9]


#
# let's try the  count  endpoint, with geojson format (json with geographical data)
#

url = "https://earthquake.usgs.gov/fdsnws/event/1/count?format=geojson&minmagnitude=5.0&starttime=2024-01-01&endtime=2024-02-01"

result = requests.get(url)                       # a named input, params, taking the value param_d, above
print(f"result is {result}")                     # hopefully, this is 200
print(f"the full url used was\n {result.url}")   # it's nice to be able to see this


# if it worked, we should be able to obtain the json. remember, it's a dictionary. let's use d:

d = result.json()

print(f"{d =}")


#
# here is the endpoint
#
url = "https://earthquake.usgs.gov/fdsnws/event/1/count"

# let's use variables for three of the parameters:
min_mag = 4.2               # the minimum magnitude considered a quake (min_mag)
start_time = "2025-01-01"   # this is the year-month-day format of the start
finish_time = "2025-02-01"  # similar for the end

# we assemble a dictionary of our parameters, let's name it param_dictionary
# there are many more parameters available. the problems below ask you to explore them...
param_dictionary = { "format":"geojson",         # this is simply hard-coded to obtain json
                     "starttime":start_time,
                     "endtime":finish_time,
                     "minmagnitude":min_mag,
                     }

# here, we use requests to make the request. the parameters will be added by this api call:
result = requests.get(url, params=param_dictionary)
print(f"result is {result}")                     # hopefully, this is 200
print(f"the full url used was\n {result.url}")   # this will include the parameters!


# if it worked, we should be able to see the json results:

d = result.json()
print(f"json returned was {d = }")


#
# how many quakes of magnitude >= 4.2 have been within 300km of claremont 
#     + in jan 2025
#     + in dec 2025
#
url = "https://earthquake.usgs.gov/fdsnws/event/1/query"

# let's use variables for three of the parameters:
min_mag = 2.2               # the minimum magnitude considered a quake (min_mag)
start_time = "2025-01-01"   # this is the year-month-day format of the start
finish_time = "2025-02-01"  # similar for the end
# start_time = "2024-01-01"   # similar, but for a year-cs35_participant_2 span...
# finish_time = "2025-01-01"  # similar for the end
radius_in_km = 300

# we assemble a dictionary of our parameters, let's name it param_dictionary
# there are many more parameters available. the problems below ask you to explore them...
param_dictionary = { "format":"geojson",         # this is simply hard-coded to obtain json
                     "starttime":start_time,
                     "endtime":finish_time,
                     "minmagnitude":min_mag,
                     "latitude":34.0967,
                     "longitude":-117.7198,
                     "maxradiuskm":radius_in_km,
                     }

# here, we use requests to make the request. the parameters will be added by this api call:
result = requests.get(url, params=param_dictionary)
print(f"result is {result}")                     # hopefully, this is 200
print(f"the full url used was\n {result.url}")   # this will include the parameters!

# we'll extract the final result in another cell:


# let's finish up here:
quake_count = result.json()
print(f"there were {quake_count['metadata']['count'] } total quakes of magnitude greater than 2.2 within 300km of claremont since the start of the year.")


#
# here is the endpoint
#
url = "https://earthquake.usgs.gov/fdsnws/event/1/query"

# let's use variables for three of the parameters:
min_mag = 7.4               # the minimum magnitude considered a quake (min_mag)
start_time = "2024-01-01"   # this is the year-month-day format of the start
finish_time = "2024-12-31"  # similar for the end

# we assemble a dictionary of our parameters, let's name it param_dictionary
# there are many more parameters available. the problems below ask you to explore them...
param_dictionary = { "format":"geojson",         # this is simply hard-coded to obtain json
                     "starttime":start_time,
                     "endtime":finish_time,
                     "minmagnitude":min_mag,
                     }

# here, we use requests to make the request. the parameters will be added by this api call:
result = requests.get(url, params=param_dictionary)
print(f"result is {result}")                     # hopefully, this is 200
print(f"the full url used was\n {result.url}")   # this will include the parameters!


# if it worked, we should be able to see the json results:

d = result.json()
print(f"json returned was {d = }")


#
# that's hard to read!
# let's pretty-print it with the json library
#       also, this version can be pasted into online formatters, e.g., https://jsonformatter.org/

import json 
nice_string = json.dumps(d)   # this outputs a "nicely formatted string" using double quotes
print(nice_string)




import json 
nicer_string = json.dumps(d, indent=4)   # we can specify the indentation. 
print(nicer_string)                      # it's another tree structure... !


#
# hw2: iss tasks 1 and 2 ...
# 
# two functions:  iss_now(), iss_distance()

#
# use the iss examples above to write a function, named 
#     
#      iss_now()
#
# that uses requests to return the current latitude and longitude -- as floating-point values -- right now.
# be sure to test it! 
import requests

def iss_now():

    url = "http://api.open-notify.org/iss-now.json"   # this is sometimes called an "endpoint" ...
    result = requests.get(url)
    json_contents = result.json()
    #print(json_contents)
    lat = float(getlat(json_contents))
    cs35_participant_2 = float(getlong(json_contents))
    #print(json_contents)
    return (lat, cs35_participant_2)

print(iss_now())



# 
# once your iss_now() function is working, write a new function
#

def iss_distance(): 
#
# which uses iss_now to obtain the lat/cs35_participant_2 of the iss and then
# uses the haversine distance (look up a python implementation or use one of ours... :)
# to compute the iss's distance from a city of your choice.
#
# the haversine distance computes the "great circle" distance from two points on the globe
#     using latitude and longitude  
#
    iss_loc = iss_now()
    isslong = iss_loc[1]
    isslat = iss_loc[0]
    claremontlat = 34.0967
    claremontlong = -117.7198
    dist = haversine(claremontlat, claremontlong, isslat, isslong)
    return dist

print(iss_distance())


#
# open-ended possibility:  
#    (a) create a new function iss_distance(place) that takes in a place name
#    (b) find a service by which you can look up the lat + cs35_participant_2 using the place name
#         (b*)  i'm not sure how to do this - it's exploratory! 
#    (c) then, continue with the previous computation to find the iss distance! :) 
#

# 
# once your iss_now() function is working, write a new function
#

def iss_distancefrom(place): 
#
# which uses iss_now to obtain the lat/cs35_participant_2 of the iss and then
# uses the haversine distance (look up a python implementation or use one of ours... :)
# to compute the iss's distance from a city of your choice.
#
# the haversine distance computes the "great circle" distance from two points on the globe
#     using latitude and longitude  
#
    iss_loc = iss_now()
    isslong = iss_loc[1]
    isslat = iss_loc[0]
    placelat = coordinatesfromname(place)[0]
    #print(placelat)
    placelong = coordinatesfromname(place)[1]
    #print(placelong)
    
    dist = haversine(placelat, placelong, isslat, isslong)
    return dist

city = 'claremont, ca'
d_from_claremont = iss_distancefrom(city)
print(f"the iss is {d_from_claremont} miles from {city}.")

# the final problem of this hw2 is to take on _one_ open-ended possibility. 
#     (this iss-themed one is only the first possibility.)
#     others, below, involve earthquakes, or your own choice of api exploration...


from opencage.geocoder import opencagegeocode

def coordinatesfromname(placename):
    #
    # uses the opencagegeocode api to return the latitude and longitude of place as a tuple given a place name 
    #
    ocg = opencagegeocode('77532d6bcfed4afdb6d45f163c26724f')
    results = ocg.geocode(placename, language='en')
    #lat = results[0]['annotations']['lat']
    #cs35_participant_2 = results[0]['annotations']['cs35_participant_2']
    return (results[0]['bounds']['northeast']['lat'], results[0]['bounds']['northeast']['lng'])

coordinatesfromname('almaty, kazakhstan')




#
# hw2: usgs tasks 3 and 4 ...
# 
# two functions:  quake_loop(), quake_compare(place1, place2)

#
# use the usgs (earthquake) examples above to write a function, named 
#

import matplotlib.pyplot as plt

url = "https://earthquake.usgs.gov/fdsnws/event/1/query"
# let's use variables for three of the parameters:
min_mag = 2.2               # the minimum magnitude considered a quake (min_mag)
start_time = "2024-01-01"   # similar, but for a year-cs35_participant_2 span...
finish_time = "2025-01-01"  # similar for the end
radius_in_km = 300

def quake_loop():  
    #
    #   function that uses requests within a loop of your own design in order to
    #   + obtain at least 10 distinct, comparable data elements (counts are encouraged; other items ok)
    #   + see the assignment page for an example where the looping iterates over the _month_
    #
    #   + choose your favorite parameter(s) to vary, e.g., magnitude, time, radius, location, etc.
    #   + it should collect all of those data elements into a list
    #   + and render the list in a neatly formatted chart (f-strings welcome; not required)
    #
    #   + in addition, include a overall reflection on the results, as well as a comment on additional effort
    #     that could expand your results (you need not run it), and any concerns or caveats about the data...
    #   + feel free to copy-paste-edit the markdown "reflection-template," above  

    lat = 37.668819
    cs35_participant_2 = -122.080795
    count_list = []
    long_list = []
    for i in range(46):
        # we assemble a dictionary of our parameters, let's name it param_dictionary
        # there are many more parameters available. the problems below ask you to explore them...
        param_dictionary = { "format":"geojson",         # this is simply hard-coded to obtain json
                            "starttime":start_time,
                            "endtime":finish_time,
                            "minmagnitude":min_mag,
                            "latitude":lat,
                            "longitude":cs35_participant_2,
                            "maxradiuskm":radius_in_km,
                            }
        result = requests.get(url, params = param_dictionary) 
        quake_info = result.json()
        count = quake_info['metadata']['count']
        long_list += [cs35_participant_2]
        count_list += [count]
        cs35_participant_2 += 1
    return (count_list, long_list)

quakes = quake_loop() 
categories = quakes[1]
values = quakes[0]
plt.bar(categories, values, color = 'lightblue')
plt.xlabel("longitude")
plt.ylabel("number of earthquakes")
plt.title("longitude vs number of earthquakes across the continental us")
plt.show()
    



# 
# once your quake_loop() function is working, write a new function
#
def quake_compare(place1, place2):
    places = [place1, place2]
    radius_in_km = 200
    min_mag = 4.0 
    max_count = 0 
    for e in places: 
        param_dictionary = { "format":"geojson",         # this is simply hard-coded to obtain json
                                "starttime":start_time,
                                "endtime":finish_time,
                                "minmagnitude":min_mag,
                                "latitude":e[0],
                                "longitude":e[1],
                                "maxradiuskm":radius_in_km,
                                }
        result = requests.get(url, params = param_dictionary) 
        quake_info = result.json()
        count = quake_info['metadata']['count']
        if count > max_count:
            max_count = count
            maxplace = e 
    return maxplace 

#
# where place1 should be a 2-element tuple:  (latitude1, longitude1)
# and  place2 should be a 2-element tuple:  (latitude2, longitude2)
#
# and then your function should compare which of the two places is "quakier" (not a real word)
# for a given time span (you choose), and a given strength-of-quakes (you choose), and
# for a specific radius around each of the two places (you choose)
#
# as is clear, there is lots of freedom to design a "comparison of quakiness" -- wonderful!
# feel free to start somewhere, and tune the results.
#
# your function should print the results it finds (in this case, it's not important to return
# and specific value -- though you're encouraged (not required) to create a helper function and 
# then call it twice for the two locations! (that helper function would need a return value!)
#
#



#testing quake_compare -- as expected when looking at the above graph, at latitude 37, there are many more earthquakes towards the western us (-120 longitude) as opposed to the east coast (-80 longitude)
place1 = (37.668819, -120)
place2 = (37.668819, -80)
a = quake_compare(place1, place2)
print(f"between the two locations {place1} and {place2}, {quake_compare(place1, place2)} is 'quakier'...")


#
# cells for your own api experimentations + results!
#
# the function finds the number of minutes between the end of civil and nautical twilight in a given location and offers an interesting fact about that integer. 
#

def factabouttwilightmins(city):
    url = 'https://api.sunrise-sunset.org/json'
    lat, lng = coordinatesfromname(city)
    param_dictionary = {'lat': lat, 'lng': lng}
    result = requests.get(url, params = param_dictionary)
    result = result.json()
    civilend = result['results']['civil_twilight_end'][0:5]
    if civilend[1] == ':':
        civilhour = float(civilend[0])
        civilmins = float(civilend[2:4])
    else:
        civilhour = float(civilend[0:2])
        civilmins = float(civilend[3:5])
    nauticalend = result['results']['nautical_twilight_end'][0:5]
    if nauticalend[1] == ':':
        nauticalhour = float(nauticalend[0])
        nauticalmins = float(nauticalend[2:4])
    else:
        nauticalhour = float(nauticalend[0:2])
        nauticalmins = float(nauticalend[3:5])
    #print(civilhour, civilmins, nauticalhour, nauticalmins)
    #print(result)
    nummins = int(60*(nauticalhour+(1/60)*nauticalmins- civilhour - (1/60)*civilmins))
    print(f'there are {nummins} minutes between the end of civil and nautical twilight in {city} today.') 
    url = f'http://numbersapi.com/{nummins}/trivia'
    result = requests.get(url)
    print(f'interestingly: {result.text}')

factabouttwilightmins('claremont, ca')
factabouttwilightmins('belmont, ma')



