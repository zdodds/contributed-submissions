## hw1pr1: <i>Files!</i>
+ walking through folders and files  (500 files - or many more!)
+ analyzing, counting, inquiring, and <i>insight-producing</i> as we go!  By the way, when I run the above cell on my desktop machine (Mac), the response is

``'/Users/zacharydodds/Desktop/cs35/week1/starting_notebooks'``

on a Windows laptop, the path uses a different separator. Mine is

``'c:\\Users\\dodds\\OneDrive\\Desktop\\cs35\\week1\\starting_notebooks'``

Your results will almost certainly differ.

In fact, if they *don't* differ ... I'm _very_ interested! ðŸ¤” ðŸ¦”In 2024, my Mac setup succeeds with a ``UserWarning`` that tells me to install the ``pickleshare`` library.

I refuse based on snack-sharing principles!

One can only share freely, not under admonishment/warning!

(If this happens to you - let me know and we'll fix it...)On first glance, it seems we can't open the file ``nottrue.ipynb`` ...

It's in the folder ``intro_first`` -- see if you can open it ...We *could* use the command-line ``cat`` or ``type`` one file at a time ...

But, what if we have to walk _500 files_ ?!  <font size="-2">(Alas, this joke stays around for at least this whole week!)</font>

  + Then, we need a function - and script - to access its contents. 
  + We started this last week, let's revisit it again here:Notice that, in Python, the Mac/forwardslash/style paths work, _even on Windows_#### But, we have 500 files...

Let's write <font color="DodgerBlue">_steppingstone_ functions</font> to make sense of our 500 files...

Let's start by reminding ourselves we can write a function that returns.

We'll call this Version 0:<hr>#### Introducing ``os.walk``

The function ``os.walk(path)`` will walk _any number_ of files...

Before we write a function, let's try  ``os.walk`` immediately:Here's a line-wrapped version of the list ``L``
  + Below it, is a picture of the folder-and-file structure!  
  + Our goal: mind-mapping the two representations!!``L = [('./intro_first', ['cs', 'sci'], ['.DS_Store', 'nottrue.ipynb']), 
('./intro_first/cs', [], ['.DS_Store', 'file35.txt', 'file181y.txt']), 
('./intro_first/sci', ['50', '10'], ['.DS_Store']), ('./intro_first/sci/50', [], ['IDE.txt']), ('./intro_first/sci/10', [], ['IDE.txt'])]``See if you can match the _syntactic_ structure (the text!) with the _visual_ structure (the image!) 

<hr>

Onward!#### Now, let's incorporate ``os.walk`` into a series of functions...Ok!  But we didn't actually "walk" the folders -- or files! 

That is, we only counted, and didn't <u>consider</u>, each one...

Let's print all of the folder names!
If you're on Windows, you likely see some "hidden MACOSX" directories, ``__MACOSX``

<font color="DodgerBlue"><b>Task!</b></font> 

Change the above code so that it _skips_ any path that contains the string ``__MACOSX``

We'll do this together...<hr>But, we want to see the files!

Let's print all their full filenames (the full paths)!**Aside**: &nbsp;&nbsp; It's possible to assemble paths using the operating system's "correct" character:Notice that it _joined_ the path and the file.

<br>

Since Python is happy with ``/`` we'll use that for now.

<hr>#### But, we want to get all of the files' _contents_  !

<u>Notice</u> there are lots of files named ``".DS_Store"`` ...

They are binary data used by MacOS - they will cause trouble!

Let's see the trouble, and then fix it:#### The encoding was wrong!  

(Those ``.DS_store`` files are binary, not human-readable.)

We could change to, say, latin-1 and see the bytes. But, let's not...

We really just want to _algorithmically_ skip over those files. Let's try it:

<font color="DodgerBlue"><b>Task to try</b></font>

Add an if statement in the above "steppingstone function" in order to simply skip over any file that begins with a dot (a period character: ``"."``)

Then, run it again. (It's ok to leave those dot files' pathnames - or not...)<hr>####  Two examples leading into our 10,000-file challenges! 

<u>Example 1</u> &nbsp; Let's count how many ``.txt`` files we have... <font color="DodgerBlue"><b>This is an example</b></font> of a short (1-3 sentence) markdown cell, giving interpretation and context for the above result...

#### Number of ``.txt`` files
  + It seems that this folder, ``intro_first`` has four (4) ``.txt`` files.  This seems reasonable!
  + We could go further and see what _percentage_ of files are ``.txt`` ... 
  + It's also worth noting that we're trusting the file extension ``.txt`` here: some text files could be masquerading as other things... ðŸ˜Š?!The key idea is to ...
  + share the results found, contextualized for us sapiens ...
  + consider what else could be done, even if we're not doing so ...
  + note possible incompletenesses, countervailing forces, concerns in general ...
  + use emojis ðŸ¦” !<hr>####  Second example: using file *contents* 

<u>Example 2</u> &nbsp; Let's count how many of the ``.txt`` files contain the substring ``'CS'`` -- not in the filename, but in the file ***contents***<font color="Coral"><b>Results:</b></font> 

#### Number of ``CS``-content ``.txt`` files
  + It seems that this folder, ``intro_first`` has two ``'CS'``-containing ``.txt`` files, out of four total ``.txt`` files, that is, ``50%`` <br><br>
  + <u>Reflection</u>: _This seems computationally balanced._ <br><br>
  + <u>Opportunities</u>: We could go further and try this in larger folders - such as this whole machine! Or, we could look for other things (like phone numbers or names in various formats). Or, really, we could ask-and-answer almost any algorithmic question about any subset of files on any machine at all... <br><br>
  +   _The fox knows many things, but the hedgehog knows one big thing._ - [Archilochus](https://www.goodreads.com/author/quotes/7614908.Archilochus#:~:text=Archilochus%20Quotes&text=We%20don't%20rise%20to,the%20level%20of%20our%20training.&text=The%20fox%20knows%20many%20things,hedgehog%20knows%20one%20big%20thing.&text=Heart%2C%20my%20heart%2C%20so%20battered,the%20men%20who%20hate%20us.) ðŸ¦” #### Trying other directories/folders

The ``path`` can be _any_ folder on your local machine, allowing for _arbitrary_ local exploration and discovery...

For example, this next cell will count <font color="Coral"><b>how many folders</b></font> do I have, starting at some ``path``
+ to count <font color="Coral"><b>files</b></font>, you'll need to build from the examples above#### <font color="DodgerBlue"><b>Your task</b></font>: The Rolodex challenge!
+ Here is [the homework page that describes hw1's challenges...](https://docs.google.com/document/d/1SXgPlR00aIxahDi3OYR8y9-AODNwBuLbQsLLt9AKSa4/edit)
+ A few questions are "our" design
+ Then, ask-and-answer more are of _your_ design
+ And, you'll answer _your_ questions from at least two other "root" directories (the ``path`` that gets everything started is sometimes called the "root": the folder whose files your functions _walk_! :)
+ Create a short <font color="Coral"><b>Results:</b></font> section after each of "our" and _your_ questions. Feel free to use the template above.
+ Good luck, walking <i>far more</i> than one thousand files!

<br>
### [[Part A]]    Phone-number files#### Number of ``.txt`` files
  + Folder ``hw1pr1`` from path '/Users/amandadee/Desktop/week1.1/week1_sum24/hw1pr1' has 11892 ``.txt`` files
  + Sounds about right for a large phonebook of files (around 10,000)#### Maximum depth of directories in the entire folder
  + Folder ``hw1pr1`` seems to have a maximum directory depth of 10!
  + Probably would comment out print(f"{currentpath =}") and print the full longest filepath to double check the max directory depth.#### Total phone numbers that have exactly 7, 10, 11 digits
  + Digits dictionary {7 : 1216, 10 : 10375, 11 : 80} where key is [7,10,11] and values are [1216,10375,80] 
  + Human insight needed to be inputted to know that phone numbers are either 7 digits, 10 with area code, and 11 with country code. How else might it be coded otherwise? #### Total phone numbers that are in the area code 909 (assume 10 digits)
  + 1188 phone numbers with area code 909. That should be a little less than the total number of students of CMC! Assuming all are local to the Inland Empire region or international and got their numbers around here. 
  + What more might be done.. record the different countries by assuming local (US) phone numbers as 7 digits, 10 digits, or 11 digits starting with '+1' or '1' using just_digits(). Hmm what about countries with country code that has 2 numbers i.e. New Zealand +64 thus making it 12 digits..#### First names and Last Names
  + How many people have your last name? 0 people have the last name 'CS35_Participant_10' 
  + Choose another last  name present: 1 people have the last name 'Canel' 
  + How many people have your first name? 2 people have the first name 'CS35_Participant_10' 
  + Choose another first name present: 5 people have the first name 'Emmie'   
  + We could check how many variations of a particular name there are e.g. Cat Cath Cathy Catherine. We could check how many variations of a particular name there are to see name popularity. 
  + We could improve this by allowing user input for names instead of hardcoding the target first and last name. 
  + I have two given names! In cases where there are more than 3 unique names to a person, I'd probably take the first entry or first entry after the comma as the first name and same thought for the last name. This assumes that folks don't prefer their second given name. 
#### Phone numbers with more than 10 digits
  + Yes! 189 phone numbers with 12-digits and 0 numbers with 13-digits
  + Made tweaks to the code earlier knowing from a google search 'Yes, there are phone numbers with more than 10 digits. The length of a phone number depends on the country. For example, China's phone numbers can have up to 13 digits, while Mozambique and Brazil's phone numbers can have up to 12 digits.'#### Counting eyes in names
  + 525 people have at least 3 letter iIs in their name! - This is not consecutive and case insensitive.
  + I am guessing (less to) no people will have 3 consecutive i's in their name.### [[Part B]]    [Exploring your own files!]   #### Number of files
  + Folder ``cs5`` from path '/Users/amandadee/Desktop/cs5' has a total of 116 files
  + Sounds about right from the multiple downloads from sophomore year !#### Maximum directory depth
  + Folder ``cs5`` from path '/Users/amandadee/Desktop/cs5' has a maximum directory depth of 3.
  + Sounds about right since I hate having too many subfolders within main folders- I can't keep track.#### Number of ``.py`` files
  + Folder ``cs5`` from path '/Users/amandadee/Desktop/cs5' has 39 ``.py`` files
  + Sounds about right ~15 weeks a semester and 2 or 3 python files for each week#### Deepest folder
  + Knowing that my Folder ``cs5``'s maximum directory depth is 3.. it seems that the deepest folder is ``./hw3pr1_f22/notebook_version/__pycache__``
  + What if I had multiple folders with depths of 3.. next time, how would I return all of them? I assume my result above was the first one from a chronological file walkthrough.#### Number of ``hw`` in ``.py`` files
  + Folder ``cs5`` from path '/Users/amandadee/Desktop/cs5' has 39 ``.py`` files and of those 32 are entitled ``hw``
  + 32/39 = ~82% checks out! 7 of those files might include starter files, midterms, finals, misc. 