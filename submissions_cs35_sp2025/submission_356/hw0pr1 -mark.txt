### Jupyter Notebooks and Markdown!
+ At heart, cs35 is about bridge-building between human expression and executable expression
+ markdown is a popular language for human expression  (this cell is markdown)
  + control-enter renders the Markdown  ("runs" it)
+ python is a popular language for executable expression (see cells below!)#### This is a Markdown cell, a <i>fourth-level</i> header
+ If you've already used Markdown, e.g., in Discord, wiki editing, etc., wonderful!
+ If you haven't used it, [this Markdown link](https://www.markdownguide.org/basic-syntax/) is a reference...
+ Equally or more welcome: &nbsp; Dive in! &nbsp; Share! &nbsp; Ask!#### <font color="Coral">First task</font> -- is "to markdown":
+ Here, use your markdown knowledge or research to...
+ **bold** this item
+ *italicize* this item
+ ~~strikethrough this item~~
+ `use fixed-width formatting for this item, i.e., code-style`
+ > # [and then do something else (your choice) with this item)](https://www.markdownguide.org/basic-syntax/)
+ BUT... <i><b><u>don't</u></b></i> use mark<u>up</u>, as this item does. Use mark<u>down</u>!
+ That is to say, don't use tags like <tt>\<i\>this\</i\></tt> for any of the challenges above...#### <font color="Coral">Second task</font> -- Be sure to
+ Change this list so that it uses <u>your</u> name and includes at least three "fun facts" about yourself, including at least two links and at least one link to a picture of you somewhere...
+ For example, my answers are
+ CS35_Participant_10
+ I <3 cs35 
+ I am a senior at [CMC](https://www.cmc.edu/) and am taking cs35 @ Mudd, lab science @ Scripps, machine learning @ Pitzer, pickleball @ Pomona
+ My current distraction is watching [Culinary Class Wars](https://www.netflix.com/title/81728365)
+ There seems to be restrictions on calling the image on my LinkedIn profile the cards on [5C Product Space](https://www.5cproductspace.com/about) so let's try this instead#### <font color="Coral">Third task</font> include a linked image via url: This is a _different_ group of people in one of the 5C Communities I'm a part of...

This is not me, but I will be in the Class of 2025 photo :-)

![Not me](https://www.cmc.edu/sites/default/files/2024-09/Class%20of%202024%20Cohort%20Photo%201.jpg)### Onward to Python!#### Python review in about 5-10 cells!

cs5 in one day!#### Let's use f-strings more carefully ...
#### Notice that variables persist from cell to cell...

Here, ``L`` and ``colleges`` are variables defined above.
Their values are still present:
#### ``split`` is a _really_ useful function

Notice that it is called <i>by</i> the string being split.

It returns a list!

(Q'n: <i>How in the input being used?</i>)
#### ``join`` is the _opposite_ of split#### <font color="Coral">Fourth task</font>: &nbsp; add another example in the spirit of the one below...
+ create (at least) three more variables and
+ a sentence using all of them and
+ render them in a single strings using f-strings...    

Experiment!#### **Remember**  _list comprehensions_  ?
+ they are "loops-in-lists"
+ or "lists-with-loops"

#### <font color="Coral">Fifth task</font>: &nbsp; <b>LC Challenge</b>

Use list comprehensions to find how many of the first 1000 integers, _when squared_, contain the digit 4?
+ Remember: ``str(x)`` converts ``x`` to a string

Then, create a variation of this question -- of your own design -- and answer it! For example,
+ what about checking for ``'4'`` and ``'2'`` ?
+ what about checking for ``'4'`` or ``'2'`` ?
+ even better: something else you've devised!

Then , in a sentence-ish, explain your thinking:
  + <i>why that question</i>
  + <i>how did you answer it computationally?</i>
  + <i>does the answer seem reasonable?</i>#### Let's function!  A first example, `plus1` and  its tests...### Let's loop!

Below,
+ run this infinite loop - a while loop
+ practice using the "Interrupt" (the square at the upper left of the cell) to kill it
+ then, use the three-dots menu at the lower left to delete the cell's output...
#### For-loop reminders....#### The next cell shows a larger <b>script</b>, which calls the previous two functions:#### The two mystery functions from our in-class exercise:#### Let's show two more functions:  
+ ``count_eyes( s )`` and
+ ``just_eyes( s )``#### Now, let's test our ``count_eyes`` function on all of the Sonnets:#### Now, let's <i>maximize</i> our ``count_eyes`` across all Sonnet lines:#### Thoughts on the most i-y line:

The line with the most 'i's was ``So CS35_Participant_2 lives this and this gives life to thee.``

Of all the sonnets, I'm surprised that no line contained more than 5 "i"s.

But, trying it again looking for 't's, the result was again 5! It was

``When in eternal lines to time thou growest:``

Maybe 5 is a more reasonable maximum than originally thought. (There are fewer than 50 characters per line, after all...).#### <b><font color="Coral">Functions</font></b> to write for hw0pr1
+ Python's <tt>str</tt> functions are documented at this [str documentation page](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)
  + find and read over how <tt>split</tt> works... (that way, too, you'll have a feel for the documentation)
+ Python's <tt>string</tt> library, used via <tt>import string</tt> is at [the string library documentation page](https://docs.python.org/3/library/string.html)
  + this has some useful constants and other capabilities. Most functionality is in the <tt>str</tt> datatype (class)
  + not needed but fun: [all of Python's built-in modules](https://docs.python.org/3/py-modindex.html)
+ Be sure to include at least two tests that run - and work - for each of these functions.#### Then, add two functions that you brainstorm, implement, and test...

Here are a couple of examples - one of mine and one from a prior cs35 - to help the brainstorming.

The key is that yours should be, well, yours! That is, something that would only have been created by you/your team -- explain the reasoning, the process you went through, and the process that ended up working.

Here, both algorithmic creativity and content creativity are equally the goal. That said, the aim is 15-20 minutes. (Remember you can always adapt the individualized outcome you're aiming for!)
#### Example stolen from the past...
+ And Kenneth + Charlie's function, as well...
  + K+C's is more representative of what's imagined...
  + Up to you!#### <b><font color="Coral">Reflections</font></b>

In a short 4-6 sentence markdown cell, share
+ Did you use AI?  (We hope so!)
+ If so, which one(s)? was it helpful?
+ Was there anything surprising about what it could help with?
+ Was there anything surprising about what it _couldn't_ help with?

Key question:
+ Did you feel there was more reinforcement -- or more tension --    between "helping accomplish" and "helping understand"?I used DeepSeek for the first time after reading its effect on the market after being reported to achieve high computational efficiency at lower costs. Plus the fact that it's *still* free. I guess python code requires a much simpler level of computation if at all. It helped breakdown the errors of my code and explained the fixes it applied. That said, I feel there was more reinforcement between helping accomplish and understand. I believe that it really is up to the user whether they use AI to only help accomplish without the understanding or maximize both. #### <b><font color="Coral">Submitting</font></b>
+ _Do_ keep your cell outputs intact: <i>Don't clear them</i>
+ If needed, use your choice of "commenting out":
+ `if False:` , `# hashes` , `''' triple quotes '''`   for code that does not work
+ _Do_ add context in comments or markdown both for things that worked (optional and welcome) and for things that you didn't get working (it shows you _know_ it's not working!)

